// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// AuthCredentials defines model for AuthCredentials.
type AuthCredentials struct {
	Token string `json:"token"`
}

// CheckboxValues defines model for CheckboxValues.
type CheckboxValues = []int

// Error defines model for Error.
type Error struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// FilterMapping defines model for FilterMapping.
type FilterMapping map[string]struct {
	Mapping map[string]struct {
		Title string `json:"title"`
	} `json:"mapping"`
	Title string `json:"title"`
}

// Grant defines model for Grant.
type Grant struct {
	FilterValues GrantFilters `json:"filter_values"`
	Id           int          `json:"id"`
	SourceUrl    string       `json:"source_url"`
	Title        string       `json:"title"`
}

// GrantFilters defines model for GrantFilters.
type GrantFilters map[string]GrantFilters_AdditionalProperties

// GrantFilters_AdditionalProperties defines model for GrantFilters.AdditionalProperties.
type GrantFilters_AdditionalProperties struct {
	union json.RawMessage
}

// IntegerValue defines model for IntegerValue.
type IntegerValue = int

// LoginCredentials defines model for LoginCredentials.
type LoginCredentials struct {
	Login    string `json:"login"`
	Password string `json:"password"`
}

// PaginationMeta defines model for PaginationMeta.
type PaginationMeta struct {
	CurrentPage int `json:"current_page"`
	TotalPages  int `json:"total_pages"`
}

// Page defines model for Page.
type Page = int

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse = Error

// GrantByIdResponse defines model for GrantByIdResponse.
type GrantByIdResponse struct {
	FiltersMapping FilterMapping `json:"filters_mapping"`
	FiltersOrder   []string      `json:"filters_order"`
	Grant          Grant         `json:"grant"`
}

// GrantsResponse defines model for GrantsResponse.
type GrantsResponse struct {
	FiltersMapping FilterMapping  `json:"filters_mapping"`
	FiltersOrder   []string       `json:"filters_order"`
	Grants         []Grant        `json:"grants"`
	Meta           PaginationMeta `json:"meta"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse = AuthCredentials

// GrantFiltersRequest defines model for GrantFiltersRequest.
type GrantFiltersRequest struct {
	Data *GrantFilters `json:"data,omitempty"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest = LoginCredentials

// GetGrantsParams defines parameters for GetGrants.
type GetGrantsParams struct {
	Page *Page `form:"page,omitempty" json:"page,omitempty"`
}

// PutGrantsGrantIdFiltersJSONBody defines parameters for PutGrantsGrantIdFilters.
type PutGrantsGrantIdFiltersJSONBody struct {
	Data *GrantFilters `json:"data,omitempty"`
}

// PostAuthLoginJSONRequestBody defines body for PostAuthLogin for application/json ContentType.
type PostAuthLoginJSONRequestBody = LoginCredentials

// PutGrantsGrantIdFiltersJSONRequestBody defines body for PutGrantsGrantIdFilters for application/json ContentType.
type PutGrantsGrantIdFiltersJSONRequestBody PutGrantsGrantIdFiltersJSONBody

// AsCheckboxValues returns the union data inside the GrantFilters_AdditionalProperties as a CheckboxValues
func (t GrantFilters_AdditionalProperties) AsCheckboxValues() (CheckboxValues, error) {
	var body CheckboxValues
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCheckboxValues overwrites any union data inside the GrantFilters_AdditionalProperties as the provided CheckboxValues
func (t *GrantFilters_AdditionalProperties) FromCheckboxValues(v CheckboxValues) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCheckboxValues performs a merge with any union data inside the GrantFilters_AdditionalProperties, using the provided CheckboxValues
func (t *GrantFilters_AdditionalProperties) MergeCheckboxValues(v CheckboxValues) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsIntegerValue returns the union data inside the GrantFilters_AdditionalProperties as a IntegerValue
func (t GrantFilters_AdditionalProperties) AsIntegerValue() (IntegerValue, error) {
	var body IntegerValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIntegerValue overwrites any union data inside the GrantFilters_AdditionalProperties as the provided IntegerValue
func (t *GrantFilters_AdditionalProperties) FromIntegerValue(v IntegerValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIntegerValue performs a merge with any union data inside the GrantFilters_AdditionalProperties, using the provided IntegerValue
func (t *GrantFilters_AdditionalProperties) MergeIntegerValue(v IntegerValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t GrantFilters_AdditionalProperties) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GrantFilters_AdditionalProperties) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /auth/check)
	PostAuthCheck(ctx echo.Context) error

	// (POST /auth/login)
	PostAuthLogin(ctx echo.Context) error

	// (GET /grants)
	GetGrants(ctx echo.Context, params GetGrantsParams) error

	// (GET /grants/{grant_id})
	GetGrantsGrantId(ctx echo.Context, grantId int) error

	// (PUT /grants/{grant_id}/filters)
	PutGrantsGrantIdFilters(ctx echo.Context, grantId int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAuthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthCheck(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAuthCheck(ctx)
	return err
}

// PostAuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAuthLogin(ctx)
	return err
}

// GetGrants converts echo context to params.
func (w *ServerInterfaceWrapper) GetGrants(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGrantsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGrants(ctx, params)
	return err
}

// GetGrantsGrantId converts echo context to params.
func (w *ServerInterfaceWrapper) GetGrantsGrantId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "grant_id" -------------
	var grantId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "grant_id", runtime.ParamLocationPath, ctx.Param("grant_id"), &grantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter grant_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGrantsGrantId(ctx, grantId)
	return err
}

// PutGrantsGrantIdFilters converts echo context to params.
func (w *ServerInterfaceWrapper) PutGrantsGrantIdFilters(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "grant_id" -------------
	var grantId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "grant_id", runtime.ParamLocationPath, ctx.Param("grant_id"), &grantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter grant_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutGrantsGrantIdFilters(ctx, grantId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/check", wrapper.PostAuthCheck)
	router.POST(baseURL+"/auth/login", wrapper.PostAuthLogin)
	router.GET(baseURL+"/grants", wrapper.GetGrants)
	router.GET(baseURL+"/grants/:grant_id", wrapper.GetGrantsGrantId)
	router.PUT(baseURL+"/grants/:grant_id/filters", wrapper.PutGrantsGrantIdFilters)

}
